-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique
--

PluginInfo = {
    Name = "Shure~ANI4IN (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "0.0.0.0-master",
    Id = "qsysc.shure.icp-401uhd.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Control for Shure ANI4IN multi-window video processor",
    ShowDebug = true,
    Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    shure_green = {178, 255, 51},
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0}
}

function GetColor(props)
    return Colors.shure_green
end

channel_count = 4

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {
        {
            Name = "IP Address",
            Type = "string",
            Value = "127.0.0.1"
        }
    }
    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {
        -- System Pins
        {
            Name = "online",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "ip_address",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "model_number",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "serial_number",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "firmware_version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "audio_ip_address",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "audio_subnet",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "audio_gateway",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        }
    }
    for s = 1, channel_count do
        table.insert(
            ctls,
            {
                Name = "source_signal_" .. s,
                ControlType = "Indicator",
                IndicatorType = "Led",
                PinStyle = "Output",
                UserPin = true
            }
        )
        table.insert(
            ctls,
            {
                Name = "source_signal_" .. s,
                ControlType = "Indicator",
                IndicatorType = "Led",
                PinStyle = "Output",
                UserPin = true
            }
        )
    end
    return ctls
end

local pagenames = {"System"}

-- This function allows you to populate pages in your plugin.
function GetPages(props) -- This function allows you to populate pages in your plugin.
    pages = {}
    table.insert(pages, {name = pagenames[1]})
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    local layout = {}

    local row_size = 8
    local btn_size = {32, 24}

    local title_size = {row_size * btn_size[1], 32}

    local status_groupbox_size = {title_size[1], 9 * btn_size[2]}

    local inputs_groupbox_position = {0, title_size[2] + status_groupbox_size[2] + (0.5 * btn_size[2])}
    local inputs_groupbox_size = {title_size[1], (2 * btn_size[2]) + (channel_count * btn_size[2])}

    local patterns_groupbox_position = {0, inputs_groupbox_position[2] + inputs_groupbox_size[2] + (0.5 * btn_size[2])}
    local patterns_groupbox_size = {row_size * btn_size[1], 3 * btn_size[2]}

    graphics = {
        {
            Type = "Header",
            Text = "Shure ANI4IN",
            HTextAlign = "Center",
            Color = Colors.Black,
            FontSize = 16,
            Position = {0, 0},
            Size = title_size
        },
        {
            Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
            Text = "Status",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.Black,
            Color = Colors.Black,
            StrokeWidth = 1,
            Position = {0, title_size[2]},
            Size = status_groupbox_size
        },
        {
            Type = "Text",
            Text = "Online:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (0.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "IP Address:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (1.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Model:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (2.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Serial Number:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (3.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Firmware:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (4.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Audio IP:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (5.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Audio Subnet:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (6.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "Text",
            Text = "Audio Gateway:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, title_size[2] + (7.5 * btn_size[2])},
            Size = {3 * btn_size[1], btn_size[2]}
        },
        {
            Type = "GroupBox",
            Text = "Channels",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.Black,
            Color = Colors.Black,
            StrokeWidth = 1,
            Position = inputs_groupbox_position,
            Size = inputs_groupbox_size
        },
        {
            Type = "Text",
            Text = "Signal",
            FontSize = 10,
            Position = {inputs_groupbox_position[1] + btn_size[1], (inputs_groupbox_position[2] + (0.5 * btn_size[2]))},
            Size = btn_size
        }
    }
    for i = 1, channel_count do
        table.insert(
            graphics,
            {
                Type = "Text",
                Text = "In" .. i,
                Position = {
                    (inputs_groupbox_position[1]),
                    (inputs_groupbox_position[2] + (0.5 * btn_size[2])) + (i * btn_size[2])
                },
                Size = btn_size
            }
        )
    end

    -- System
    layout["online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = Colors.Green,
        Position = {3 * btn_size[1], title_size[2] + (0.5 * btn_size[2])},
        Size = {btn_size[2], btn_size[2]}
    }
    layout["ip_address"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {3 * btn_size[1], title_size[2] + (1.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["model_number"] = {
        PrettyName = "System~Model Number",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (2.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["serial_number"] = {
        PrettyName = "System~Serial Number",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (3.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["firmware_version"] = {
        PrettyName = "System~Firmware Version",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (4.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["audio_ip_address"] = {
        PrettyName = "System~Audio IP Address",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (5.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["audio_subnet"] = {
        PrettyName = "System~Audio Subnet",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (6.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    layout["audio_gateway"] = {
        PrettyName = "System~Audio Gateway",
        Style = "Text",
        Position = {3 * btn_size[1], title_size[2] + (7.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
    }
    for i = 1, channel_count do
        layout["source_signal_" .. i] = {
            PrettyName = string.format("Signal Presence~%02i", i),
            Style = "Indicator",
            Color = Colors.Green,
            Position = {
                (inputs_groupbox_position[1] + btn_size[1] + ((btn_size[1] - btn_size[2]) / 2)),
                inputs_groupbox_position[2] + ((i + 0.5) * btn_size[2])
            },
            Size = {24, 24}
        }
    end
    return layout, graphics
end

if Controls then
    channel_count = 4

    -- Local Structure for holding State
    shure = {
        Host = "",
        Port = 2202,
        Rx = ""
    }

    -- Build TCP Client
    conn = TcpSocket.New()
    conn.ReadTimeout = 0
    conn.WriteTimeout = 0
    conn.ReconnectTimeout = 5

    -- Create and setup the Communications Timeout
    timerComms = Timer.New()
    timerComms.EventHandler = function(timer)
        timer:Stop()
        Controls.online.Boolean = false
        print("Connection Timed Out")
        conn:Disconnect()
        fnConnect()
    end

    -- Create and setup Polling
    timerPoll = Timer.New()

    timerPoll.EventHandler = function(timer)
        fnPoll()
    end

    function fnInitPoll(activate)
        timerPoll:Stop()
        if activate == true then
            timerPoll:Start(10)
        end
    end

    function fnPoll()
        for i = 1, channel_count do
        end
    end

    function fnSend(cmd)
        local command_string = "< " .. cmd .. " >"
        print(command_string)
        conn:Write(command_string)
    end

    function fnSendChannel(cmd_type, channel, command)
        local command_string = "< " .. cmd_type .. " " .. channel .. " " .. command .. " >"
        print(command_string)
        conn:Write(command_string)
    end

    function fnInit()
        fnSend("GET MODEL")
        fnSend("GET SERIAL_NUM")
        fnSend("GET FW_VER")
        fnSend("GET IP_ADDR_NET_AUDIO_PRIMARY")
        fnSend("GET IP_SUBNET_NET_AUDIO_PRIMARY")
        fnSend("GET IP_GATEWAY_NET_AUDIO_PRIMARY")
        fnPoll()
    end

    -- Setup Utility Callbacks as required
    conn.Connected = function(conn)
        print("TCP socket is Connected")
        -- Set a timer to wait for connection to establish
        Timer.CallAfter(fnInit, 1)
        Controls.online.Boolean = true
        fnSend("")
    end
    conn.Reconnect = function(conn)
        print("TCP socket is Reconnecting")
    end
    conn.Closed = function(conn)
        Controls.online.Boolean = false
        print("TCP socket was closed by the remote end")
        fnInitPoll(false)
    end
    conn.Error = function(conn, err)
        Controls.online.Boolean = false
        print("TCP socket had an error ::")
        print(err)
    end
    conn.Timeout = function(conn, err)
        Controls.online.Boolean = false
        print("TCP socket had an timeout ::")
        print(err)
    end

    -- Helper Function - Open TCP Connection
    function fnConnect()
        -- Open Connection
        conn:Connect(shure.Host, shure.Port)
        print("TCP socket is Connecting")
        -- Set IP address value
        if Controls.ip_address then
            Controls.ip_address.String = shure.Host .. ":" .. shure.Port
        end
    end
    local function split(str, delim)
        local result = {}
        for part in str:gmatch("[^" .. delim .. "]+") do
            result[#result + 1] = part
        end
        return result
    end

    -- Setup Data Callbacks as required
    conn.Data = function(conn)
        -- Read out lines from the buffer
        line = conn:ReadLine(TcpSocket.EOL.Custom, " >")
        while line do
            print("Response:", line)
            -- METADATA
            if line:sub(3, 11) == "REP MODEL" then  --untested
                Controls.model_number.String = line:sub(14, -2):gsub("%s+", "")
            elseif line:sub(3, 16) == "REP SERIAL_NUM" then --untested
                Controls.serial_number.String = line:sub(19, -2):gsub("%s+", "")
            elseif line:sub(3, 12) == "REP FW_VER" then --untested
                Controls.firmware_version.String = line:sub(15, -2):gsub("%s+", "")
            elseif line:sub(3, 31) == "REP IP_ADDR_NET_AUDIO_PRIMARY" then --untested
                Controls.audio_ip_address.String = line:sub(34, -2):gsub("%s+", "")
            elseif line:sub(3, 33) == "REP IP_SUBNET_NET_AUDIO_PRIMARY" then --untested
                Controls.audio_subnet.String = line:sub(36, -2):gsub("%s+", "")
            elseif line:sub(3, 34) == "REP IP_GATEWAY_NET_AUDIO_PRIMARY" then --untested
                Controls.audio_gateway.String = line:sub(37, -2):gsub("%s+", "")
            -- CHANNELS
            elseif line:sub(7, 23) == "HW_GATING_LOGIC" then
                local ch = line:sub(7,7)
                if line:sub(-2, -1) == "ON" then
                    --Controls.Outputs[1].Boolean = true
                else
                    --Controls.Outputs[1].Boolean = false
                end
            end
            line = conn:ReadLine(TcpSocket.EOL.Custom, " >")
        end
    end

    -- Set IP address from Properties if present
    if Properties then
        if Properties["IP Address"].Value ~= "" then
            shure.Host = Properties["IP Address"].Value
            fnConnect()
        else
            print("IP Address Property Not Set")
        end
    end
end
